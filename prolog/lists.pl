% #1
% Напишите два предиката, принимающих список и элемент. 
% Первый предикат должен быть истинным, если заданный элемент является первым в списке.
% Второй предикат истинен, если заданный элемент является вторым в списке.


first([H|_], Elem) :-
    Elem is H.

second([_, H | _], Elem) :-
    Elem is H.

% #2
% Не используя стандартный предикат reverse, напишите предикат, принимающий
% два списка и истинный, если второй список есть обращение первого.


reverseAcc([], Lst, Lst).
reverseAcc([H|T], Res, Acc) :- 
    reverseAcc(T, Res, [H|Acc]).

reverse1(Lst, Res) :-
    reverseAcc(Lst, Res, []).


% #3
% Напишите предикат, принимающий истинные значения на симметричных списках.

symmetric(Lst) :-
    reverse1(Lst, Lst).

% #4
% Напишите предикат, принимающий два списка и истинный, если второй
% список получается из первого выкидыванием составных чисел.


%noCompNums([],[]).
%noCompNums(Lst, FLst) :-
%  FLst = [H|T],
%  \+isPrime(H),
%  noCompNums(T, )